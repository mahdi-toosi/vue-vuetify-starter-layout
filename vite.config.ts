// ? vite
import { defineConfig, type UserConfig } from 'vite'
// ? plugins
import vue from '@vitejs/plugin-vue'
import analyze from 'rollup-plugin-analyzer'
// import { checker } from 'vite-plugin-checker'
import { visualizer } from 'rollup-plugin-visualizer'
import vuetify, { transformAssetUrls } from 'vite-plugin-vuetify'

import { fileURLToPath, URL } from 'node:url'
import fs from 'node:fs'

const port = 3000
const limitBytes = 5e6 // 5 mg
// const eslintCheckerCommand =
// 	'eslint . --fix --cache --cache-location ./node_modules/.vite/vite-plugin-eslint'
// const stylelintCheckerCommand =
// 	'stylelint . --fix --cache-location ./node_modules/.vite/vite-plugin-stylelint'

export default defineConfig(async ({ mode }): Promise<UserConfig> => {
	const config: UserConfig = {
		// https://vitejs.dev/config/server-options.html
		server: {
			port,
			host: true,
			fs: {
				// Allow serving files from one level up to the project root
				allow: ['..'],
			},
		},
		// https://vitejs.dev/config/shared-options.html#base
		base: './',
		// https://vitejs.dev/config/shared-options.html#define
		define: { 'process.env': {} },
		plugins: [
			// Vue3
			vue({
				template: {
					// https://github.com/vuetifyjs/vuetify-loader/tree/next/packages/vite-plugin#image-loading
					transformAssetUrls,
				},
			}),
			// Vuetify Loader
			// https://github.com/vuetifyjs/vuetify-loader/tree/next/packages/vite-plugin#vite-plugin-vuetify
			vuetify({
				autoImport: true,
				styles: { configFile: 'src/assets/styles/settings.scss' },
			}),
		],
		// Resolver
		resolve: {
			// https://vitejs.dev/config/shared-options.html#resolve-alias
			alias: {
				'@': fileURLToPath(new URL('./src', import.meta.url)),
				'~': fileURLToPath(new URL('./node_modules', import.meta.url)),
			},
			extensions: ['.js', '.json', '.jsx', '.mjs', '.ts', '.tsx', '.vue'],
		},
		// Build Options
		// https://vitejs.dev/config/build-options.html
		build: {
			// Build Target
			// https://vitejs.dev/config/build-options.html#build-target
			target: 'esnext',
			// Minify option
			// https://vitejs.dev/config/build-options.html#build-minify
			minify: 'esbuild',
			// Rollup Options
			// https://vitejs.dev/config/build-options.html#build-rollupoptions
			rollupOptions: {
				// @ts-ignore
				output: {
					manualChunks: {
						// Split external library from transpiled code.
						vue: ['vue', 'vue-router', 'pinia', 'pinia-plugin-persistedstate'],
						vuetify: ['vuetify', 'vuetify/components', 'vuetify/directives'],
						materialdesignicons: ['@mdi/font/css/materialdesignicons.css'],
					},
					plugins: [
						// rollup-plugin-visualizer
						// https://github.com/btd/rollup-plugin-visualizer
						mode === 'analyze' &&
							visualizer({
								open: true,
								gzipSize: true,
								brotliSize: true,
								filename: 'dist/stats.html',
							}),
						analyze({
							skipFormatted: true,
							onAnalysis({ bundleSize }) {
								if (bundleSize < limitBytes) return
								// eslint-disable-next-line no-console
								console.log(
									`Bundle siz‍e exceeds ${limitBytes} bytes: ${bundleSize} bytes`
								)
								return // process.exit(1)
							},
						}),
					],
				},
			},
		},
		// esbuild: {
		// Drop console when production build.
		// drop: command === 'serve' ? [] : ['console'],
		// },
	}

	// // https://github.com/fi3ework/vite-plugin-checker
	// const checkerPlugin = checker({
	// 	vueTsc: true,
	// 	typescript: true,
	// 	eslint: { lintCommand: eslintCheckerCommand },
	// 	stylelint: { lintCommand: stylelintCheckerCommand },
	// 	overlay: { initialIsOpen: false, panelStyle: 'direction: ltr;' },
	// })
	// // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	// if (!process.env.VITEST) config.plugins!.push(checkerPlugin)

	// Write meta data.
	fs.writeFileSync(
		fileURLToPath(new URL('./src/Meta.ts', import.meta.url)),
		`// This file is auto-generated by the build system.
const meta = {
	version: '${require('./manifest.json').version}',
}
export default meta
`
	)

	return config
})
